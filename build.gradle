import org.flywaydb.gradle.task.FlywayInfoTask
import org.flywaydb.gradle.task.FlywayMigrateTask

buildscript { // for doma-codegen
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.mysql:mysql-connector-j:8.0.33'
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'groovy'
    id 'eclipse'
    id 'com.diffplug.eclipse.apt' version '3.42.2' // Eclipseビルド時のapt
    id 'idea'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.flywaydb.flyway' version '8.2.0' // これより上記バージョンでは動作しない
    id 'org.domaframework.doma.compile' version '2.0.0'
    id 'org.domaframework.doma.codegen' version '2.0.0'
    id 'jacoco'
    id 'org.sonarqube' version '4.3.0.3225'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.seasar.doma.boot:doma-spring-boot-starter:1.7.0'
    implementation 'org.seasar.doma:doma-core:2.54.0'
    implementation 'org.seasar.doma:doma-slf4j:2.54.0'
    implementation 'com.zaxxer:HikariCP'
    implementation 'com.google.guava:guava:32.1.2-jre'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.seasar.doma:doma-processor:2.54.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation('com.github.springtestdbunit:spring-test-dbunit:1.3.0') {
        exclude module: 'junit'
        exclude module: 'dbunit'
        exclude module: 'postgresql'
    }
    testImplementation('org.dbunit:dbunit:2.7.3') {
        exclude module: 'postgresql'
        exclude module: 'ojdbc8'
    }
    testImplementation 'org.spockframework:spock-spring:2.4-M1-groovy-4.0' // SpringBoot3系では2.4以降
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'generated/src/main/java'
        }
    }
}

test {
    ignoreFailures = true
}
tasks.named('test') {
    useJUnitPlatform()
    jvmArgs = ['-Dspring.profiles.active=ut']
}
jacocoTestReport {
    reports {
        xml.required = true
    }
}

// Eclipse/VSCodeで必要な設定ファイルを整備
tasks.named('eclipse') {
    mkdir '.apt_generated'
}
tasks.eclipse.doFirst {
    File prefs = file(".settings/org.eclipse.buildship.core.prefs")
    if (!prefs.exists()) {
        prefs.append('''
            eclipse.preferences.version=1
            connection.project.dir=
            override.workspace.settings=false
            '''.stripIndent())
    }
    prefs = file(".settings/org.eclipse.jdt.groovy.core.prefs")
    if (!prefs.exists()) {
        prefs.append('''
            eclipse.preferences.version=1
            groovy.compiler.level=40
            '''.stripIndent())
    }
}
tasks.eclipse.doLast {
    File prefs = file(".settings/org.eclipse.jdt.apt.core.prefs")
    def newPrefs = prefs.text.replace('org.eclipse.jdt.apt.aptEnabled=true', 'org.eclipse.jdt.apt.aptEnabled=false')
    prefs.text = newPrefs
}
eclipse {
    project {
        // Eclipseではgroovyソースはソースリンクにすることでコンパイルされるので作成が必要
        linkedResource name: 'test_groovy', type: '2', location: "$projectDir/src/test/groovy".toString()
    }
    classpath {
        file {
            whenMerged { classpath ->
                classpath.entries.findAll { entry -> entry.kind == 'output' }*.path = 'bin/main' // DomaProcessorがSQLファイルを見つけられるように変更
                classpath.entries.removeAll { it.path == 'test_groovy' }
                // specify output path for .apt_generated / test_groovy
                classpath.entries.removeAll { it.path == '.apt_generated' }
                classpath.entries.removeAll { it.path == 'src/test/groovy' }
            }
            withXml { provider ->
                def node = provider.asNode()
                // specify output path for .apt_generated / test_groovy
                node.appendNode('classpathentry', [ kind: 'src', output: 'bin/main', path: '.apt_generated' ])
                node.appendNode('classpathentry', [ kind: 'src', output: 'bin/test', path: 'test_groovy' ])
                    .appendNode('attributes')
                    .appendNode('attribute', [name: 'test', value: 'true'])
            }
        }
    }
    jdt {
        javaRuntimeName = 'JavaSE-17'
        file {
            // set properties for the file org.eclipse.jdt.core.prefs
            withProperties { properties ->
                // https://github.com/redhat-developer/vscode-java/issues/3243
                properties['org.eclipse.jdt.core.compiler.codegen.methodParameters'] = 'generate'
            }
        }
    }
}

// in other envs: gradle flywayInfo -Pflyway.url=aaa -Pflyway.user=bbb -Pflyway.password=ccc
flyway {
    locations = ['filesystem:src/db/migration']
}
// ローカルはIDEでワンクリック操作できるように専用タスクを用意
tasks.register('flywayInfo_maindb', FlywayInfoTask) {
    url = 'jdbc:mysql://localhost:3306/maindb'
    user = 'webapp'
    password = 'webapp'
    locations = ['filesystem:src/db/migration']
}
tasks.register('flywayMigrate_maindb', FlywayMigrateTask) {
    url = 'jdbc:mysql://localhost:3306/maindb'
    user = 'webapp'
    password = 'webapp'
    locations = ['filesystem:src/db/migration']
}
tasks.register('flywayInfo_testdb', FlywayInfoTask) {
    url = 'jdbc:mysql://localhost:3306/testdb'
    user = 'junit'
    password = 'junit'
    locations = ['filesystem:src/db/migration']
}
tasks.register('flywayMigrate_testdb', FlywayMigrateTask) {
    url = 'jdbc:mysql://localhost:3306/testdb'
    user = 'junit'
    password = 'junit'
    locations = ['filesystem:src/db/migration']
}

domaCodeGen {
    dev {
        url = 'jdbc:mysql://localhost:3306/maindb'
        user = 'webapp'
        password = 'webapp'
        ignoredTableNamePattern = 'flyway_schema_history'
        sourceDir = file('generated/src/main/java')
        entity {
            packageName = 'com.example.sysid.model.entity'
            useListener = false
            entityPropertyClassNamesFile = file("$projectDir/.local/generator/doma-codegen-enum-mapping.properties")
        }
    }
}

bootJar {
    enabled = false
}
publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = rootProject.name
            version = version
            from components.java
        }
    }
}
